{"version":3,"sources":["../index.ts","../server.ts","../routes/auth.ts","../models/User.ts","../middleware/auth.ts","../routes/rooms.ts","../models/Room.ts","../routes/bookings.ts","../models/Booking.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport app from \"./server\";\n\nconst PORT = process.env.PORT || 5000;\n\n(async () => {\n  mongoose\n    .connect(process.env.MONGODB_URI!)\n    .then(() => console.log(\"Connected to MongoDB\"))\n    .catch((err) => console.error(\"MongoDB connection error:\", err));\n  app.listen(PORT, () => console.log(`API running on port ${PORT}`));\n})();\n","import express from \"express\";\nimport mongoose from \"mongoose\";\nimport cors from \"cors\";\nimport helmet from \"helmet\";\nimport rateLimit from \"express-rate-limit\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nimport authRoutes from \"./routes/auth\";\nimport roomRoutes from \"./routes/rooms\";\nimport bookingRoutes from \"./routes/bookings\";\nimport { authenticateToken } from \"./middleware/auth\";\n\nconst app = express();\n\n// Security middleware\napp.use(helmet());\napp.use(\n  cors({\n    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n    credentials: true,\n  })\n);\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\n// Body parsing middleware\napp.use(express.json({ limit: \"10mb\" }));\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.use(\"/api/users\", authRoutes);\napp.use(\"/api/rooms\", authenticateToken, roomRoutes);\napp.use(\"/api/bookings\", authenticateToken, bookingRoutes);\n\n// Health check endpoint\napp.get(\"/api/health\", (req, res) => {\n  res.json({ status: \"OK\", timestamp: new Date().toISOString() });\n});\n\n// Error handling middleware\napp.use(\n  (\n    err,\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => {\n    console.error(err.stack);\n    res.status(500).json({\n      message: \"Something went wrong!\",\n      error: process.env.NODE_ENV === \"development\" ? err.message : {},\n    });\n  }\n);\n\n// 404 handler\napp.use(\"*\", (req, res) => {\n  res.status(404).json({ message: \"Route not found\" });\n});\n\nexport default app;\n","import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { body, validationResult } from \"express-validator\";\nimport User from \"../models/User\";\nimport { authenticateToken } from \"../middleware/auth\";\n\nconst router = express.Router();\n\n// Generate JWT token\nconst generateToken = (userId: string) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET || \"secret-key\", {\n    expiresIn: \"24h\",\n  });\n};\n\n// Register\nrouter.post(\n  \"/register\",\n  [\n    body(\"email\").isEmail().normalizeEmail(),\n    body(\"password\").isLength({ min: 6 }),\n    body(\"firstName\").trim().isLength({ min: 1 }),\n    body(\"lastName\").trim().isLength({ min: 1 }),\n  ],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { email, password, firstName, lastName } = req.body;\n\n      // Check if user already exists\n      const existingUser = await User.findOne({ email });\n      if (existingUser) {\n        return res.status(400).json({\n          message: \"User already exists with this email, please login\",\n        });\n      }\n\n      // Create new user\n      const user = new User({\n        email,\n        password,\n        firstName,\n        lastName,\n      });\n\n      await user.save();\n\n      const token = generateToken(user._id.toString());\n\n      res.status(201).json({\n        message: \"User registered successfully\",\n        token,\n        user: user.toJSON(),\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Server error during registration\" });\n    }\n  }\n);\n\n// Login\nrouter.post(\n  \"/login\",\n  [body(\"email\").isEmail().normalizeEmail(), body(\"password\").exists()],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { email, password } = req.body;\n\n      // Find user\n      const user = await User.findOne({ email, isActive: true });\n      if (!user) {\n        return res\n          .status(401)\n          .json({ message: \"email or password is incorrect\" });\n      }\n\n      // Check password\n      //@ts-ignore\n      const isMatch = await user.comparePassword(password);\n      if (!isMatch) {\n        return res\n          .status(401)\n          .json({ message: \"email or password is incorrect\" });\n      }\n\n      const token = generateToken(user._id.toString());\n\n      res.json({\n        message: \"Login successful\",\n        token,\n        user: user.toJSON(),\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Server error during login\" });\n    }\n  }\n);\n\n// Get current user\n\n\nrouter.get(\n  \"/me\",\n  authenticateToken,\n  (req: express.Request, res: express.Response) => {\n    res.json({ user: req.user });\n  }\n);\n\n// Refresh token\nrouter.post(\n  \"/refresh\",\n  authenticateToken,\n  (req: express.Request, res: express.Response) => {\n    const token = generateToken(req.user._id.toString());\n    res.json({ token });\n  }\n);\n\nexport default router;\n","import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\n\nconst userSchema = new mongoose.Schema(\n  {\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n      lowercase: true,\n      trim: true,\n    },\n    password: {\n      type: String,\n      required: true,\n      minlength: 6,\n    },\n    firstName: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    lastName: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    role: {\n      type: String,\n      enum: [\"user\", \"admin\"],\n      default: \"user\",\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// Hash password before saving\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) return next();\n\n  try {\n    const salt = await bcrypt.genSalt(12);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function (\n  candidatePassword: string\n) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Remove password from JSON output\nuserSchema.methods.toJSON = function () {\n  const user = this.toObject();\n  delete user.password;\n  return user;\n};\n\nconst UserModel = mongoose.model(\"User\", userSchema);\nexport default UserModel;\n","import jwt from \"jsonwebtoken\";\nimport express from \"express\";\nimport User from \"../models/User\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any; // Replace 'any' with your User type if available\n    }\n  }\n}\n\nconst authenticateToken = async (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n) => {\n  try {\n    const authHeader = req.headers[\"authorization\"];\n    const token = authHeader && authHeader.split(\" \")[1]; // Bearer TOKEN\n\n    if (!token) {\n      return res.status(401).json({ message: \"Access token required\" });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || \"secret-key\");\n    const user = await User.findById(decoded.userId).select(\"-password\");\n\n    if (!user || !user.isActive) {\n      return res\n        .status(401)\n        .json({ message: \"Invalid token or user not found\" });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: \"Invalid or expired token\" });\n  }\n};\n\nconst requireAdmin = (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n) => {\n  if (req.user.role !== \"admin\") {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n};\n\nexport { authenticateToken, requireAdmin };\n","import express from \"express\";\nimport { body, validationResult, param } from \"express-validator\";\nimport Room from \"../models/Room\";\nimport { requireAdmin } from \"../middleware/auth\";\n\nconst router = express.Router();\n\n// Get all rooms (available to all authenticated users)\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const { active } = req.query;\n    const filter = active === \"true\" ? { isActive: true } : {};\n\n    const rooms = await Room.find(filter).sort({ name: 1 });\n    res.json({ rooms });\n  } catch (error) {\n    console.error(\"Error fetching rooms:\", error);\n    res.status(500).json({ message: \"Server error while fetching rooms\" });\n  }\n});\n\n// Get single room by ID\nrouter.get(\n  \"/:id\",\n  [param(\"id\").isMongoId().withMessage(\"Invalid room ID\")],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const room = await Room.findById(req.params.id);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n\n      res.json({ room });\n    } catch (error) {\n      console.error(\"Error fetching room:\", error);\n      res.status(500).json({ message: \"Server error while fetching room\" });\n    }\n  }\n);\n\n// Create new room (admin only)\nrouter.post(\n  \"/\",\n  requireAdmin,\n  [\n    body(\"name\")\n      .trim()\n      .isLength({ min: 1 })\n      .withMessage(\"Room name is required\"),\n    body(\"capacity\")\n      .isInt({ min: 1, max: 100 })\n      .withMessage(\"Capacity must be between 1 and 100\"),\n    body(\"location\")\n      .trim()\n      .isLength({ min: 1 })\n      .withMessage(\"Location is required\"),\n    body(\"description\").optional().trim(),\n    body(\"amenities\").optional().isArray(),\n  ],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { name, capacity, location, description, amenities } = req.body;\n\n      // Check if room with same name already exists\n      const existingRoom = await Room.findOne({\n        name: { $regex: new RegExp(`^${name}$`, \"i\") },\n      });\n      if (existingRoom) {\n        return res\n          .status(400)\n          .json({ message: \"Room with this name already exists\" });\n      }\n\n      const room = new Room({\n        name,\n        capacity,\n        location,\n        description,\n        amenities: amenities || [],\n      });\n\n      await room.save();\n      res.status(201).json({\n        message: \"Room created successfully\",\n        room,\n      });\n    } catch (error) {\n      console.error(\"Error creating room:\", error);\n      res.status(500).json({ message: \"Server error while creating room\" });\n    }\n  }\n);\n\n// Update room (admin only)\nrouter.put(\n  \"/:id\",\n  requireAdmin,\n  [\n    param(\"id\").isMongoId().withMessage(\"Invalid room ID\"),\n    body(\"name\").optional().trim().isLength({ min: 1 }),\n    body(\"capacity\").optional().isInt({ min: 1, max: 100 }),\n    body(\"location\").optional().trim().isLength({ min: 1 }),\n    body(\"description\").optional().trim(),\n    body(\"amenities\").optional().isArray(),\n    body(\"isActive\").optional().isBoolean(),\n  ],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const room = await Room.findById(req.params.id);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n\n      // Check if new name conflicts with existing room\n      if (req.body.name && req.body.name !== room.name) {\n        const existingRoom = await Room.findOne({\n          name: { $regex: new RegExp(`^${req.body.name}$`, \"i\") },\n          _id: { $ne: req.params.id },\n        });\n        if (existingRoom) {\n          return res\n            .status(400)\n            .json({ message: \"Room with this name already exists\" });\n        }\n      }\n\n      // Update room fields\n      Object.keys(req.body).forEach((key) => {\n        if (req.body[key] !== undefined) {\n          room[key] = req.body[key];\n        }\n      });\n\n      await room.save();\n      res.json({\n        message: \"Room updated successfully\",\n        room,\n      });\n    } catch (error) {\n      console.error(\"Error updating room:\", error);\n      res.status(500).json({ message: \"Server error while updating room\" });\n    }\n  }\n);\n\n// Delete room (admin only) - soft delete\nrouter.delete(\n  \"/:id\",\n  requireAdmin,\n  [param(\"id\").isMongoId().withMessage(\"Invalid room ID\")],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const room = await Room.findById(req.params.id);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n\n      // Soft delete by setting isActive to false\n      room.isActive = false;\n      await room.save();\n\n      res.json({ message: \"Room deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting room:\", error);\n      res.status(500).json({ message: \"Server error while deleting room\" });\n    }\n  }\n);\n\nexport default router;\n","import mongoose from \"mongoose\";\n\nconst roomSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    capacity: {\n      type: Number,\n      required: true,\n      min: 1,\n      max: 100,\n    },\n    description: {\n      type: String,\n      trim: true,\n    },\n    amenities: [\n      {\n        type: String,\n        trim: true,\n      },\n    ],\n    location: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// Index for efficient queries\nroomSchema.index({ name: 1 });\nroomSchema.index({ isActive: 1 });\n\nconst RoomModel = mongoose.model(\"Room\", roomSchema);\nexport default RoomModel;\n\n","import express from \"express\";\nimport { body, validationResult, param, query } from \"express-validator\";\nimport mongoose from \"mongoose\";\nimport Booking from \"../models/Booking\";\nimport Room from \"../models/Room\";\nimport { authenticateToken, requireAdmin } from \"../middleware/auth\";\n\nconst router = express.Router();\n\n// Helper function to check for booking conflicts\nconst checkBookingConflict = async (\n  roomId: mongoose.Types.ObjectId,\n  startTime: Date,\n  endTime: Date,\n  excludeBookingId: mongoose.Types.ObjectId | null = null\n) => {\n  const conflictQuery = {\n    room: roomId,\n    status: \"confirmed\",\n    $or: [\n      {\n        startTime: { $lt: endTime },\n        endTime: { $gt: startTime },\n      },\n    ],\n  };\n\n  if (excludeBookingId) {\n    conflictQuery[\"_id\"] = { $ne: excludeBookingId };\n  }\n\n  const conflictingBooking = await Booking.findOne(conflictQuery);\n  return conflictingBooking;\n};\n\n// Get bookings (user sees own bookings, admin sees all)\nrouter.get(\n  \"/\",\n  authenticateToken,\n  [\n    query(\"room\").optional().isMongoId(),\n    query(\"date\").optional().isISO8601(),\n    query(\"status\").optional().isIn([\"confirmed\", \"cancelled\"]),\n  ],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { room, date, status, all } = req.query;\n      const filter = {};\n\n      // Regular users can only see their own bookings\n      if (req.user.role !== \"admin\" || all !== \"true\") {\n        filter[\"user\"] = req.user._id;\n      }\n\n      // Add optional filters\n      if (room) filter[\"room\"] = room;\n      if (status) filter[\"status\"] = status;\n\n      if (date) {\n        const startOfDay = new Date(date.toString());\n        startOfDay.setHours(0, 0, 0, 0);\n        const endOfDay = new Date(date.toString());\n        endOfDay.setHours(23, 59, 59, 999);\n\n        filter[\"startTime\"] = { $gte: startOfDay, $lte: endOfDay };\n      }\n\n      const bookings = await Booking.find(filter)\n        .populate(\"room\", \"name location capacity\")\n        .populate(\"user\", \"firstName lastName email\")\n        // .sort({ startTime: 1 });\n        .sort({ createdAt: -1 });\n\n      res.json({ bookings });\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Server error while fetching bookings\" });\n    }\n  }\n);\n\n// Get single booking\nrouter.get(\n  \"/:id\",\n  authenticateToken,\n  [param(\"id\").isMongoId().withMessage(\"Invalid booking ID\")],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const filter = { _id: req.params.id };\n\n      // Regular users can only see their own bookings\n      if (req.user.role !== \"admin\") {\n        filter[\"user\"] = req.user._id;\n      }\n\n      const booking = await Booking.findOne(filter)\n        .populate(\"room\", \"name location capacity amenities\")\n        .populate(\"user\", \"firstName lastName email\");\n\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      res.json({ booking });\n    } catch (error) {\n      console.error(\"Error fetching booking:\", error);\n      res.status(500).json({ message: \"Server error while fetching booking\" });\n    }\n  }\n);\n\n// Create new booking\nrouter.post(\n  \"/\",\n  authenticateToken,\n  [\n    body(\"room\").isMongoId().withMessage(\"Valid room ID is required\"),\n    body(\"title\")\n      .trim()\n      .isLength({ min: 1 })\n      .withMessage(\"Meeting title is required\"),\n    body(\"startTime\").isISO8601().withMessage(\"Valid start time is required\"),\n    body(\"endTime\").isISO8601().withMessage(\"Valid end time is required\"),\n    body(\"description\").optional().trim(),\n    body(\"attendees\").optional().isArray(),\n  ],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const {\n        room: roomId,\n        title,\n        startTime,\n        endTime,\n        description,\n        attendees,\n      } = req.body;\n\n      // Validate times\n      const start = new Date(startTime);\n      const end = new Date(endTime);\n      const now = new Date();\n\n      if (start <= now) {\n        return res\n          .status(400)\n          .json({ message: \"Booking must be in the future\" });\n      }\n\n      if (start >= end) {\n        return res\n          .status(400)\n          .json({ message: \"End time must be after start time\" });\n      }\n\n      const duration = (end.getTime() - start.getTime()) / (1000 * 60 * 60); // hours\n      if (duration > 4) {\n        return res\n          .status(400)\n          .json({ message: \"Booking duration cannot exceed 4 hours\" });\n      }\n\n      // Check if room exists and is active\n      const room = await Room.findOne({ _id: roomId, isActive: true });\n      if (!room) {\n        return res\n          .status(404)\n          .json({ message: \"Room not found or not available\" });\n      }\n\n      // Check for conflicts\n      const conflict = await checkBookingConflict(roomId, start, end);\n      if (conflict) {\n        return res.status(409).json({\n          message: \"Room is already booked for this time slot\",\n          conflictingBooking: {\n            startTime: conflict.startTime,\n            endTime: conflict.endTime,\n            title: conflict.title,\n          },\n        });\n      }\n\n      const booking = new Booking({\n        room: roomId,\n        user: req.user._id,\n        title,\n        startTime: start,\n        endTime: end,\n        description,\n        attendees: attendees || [],\n      });\n\n      await booking.save();\n      await booking.populate(\"room\", \"name location capacity\");\n\n      res.status(201).json({\n        message: \"Booking created successfully\",\n        booking,\n      });\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Server error while creating booking\" });\n    }\n  }\n);\n\n// Update booking (user can update own, admin can update any)\nrouter.put(\n  \"/:id\",\n  authenticateToken,\n  [\n    param(\"id\").isMongoId().withMessage(\"Invalid booking ID\"),\n    body(\"title\").optional().trim().isLength({ min: 1 }),\n    body(\"startTime\").optional().isISO8601(),\n    body(\"endTime\").optional().isISO8601(),\n    body(\"description\").optional().trim(),\n    body(\"attendees\").optional().isArray(),\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const filter = { _id: req.params.id, status: \"confirmed\" };\n\n      // Regular users can only update their own bookings\n      if (req.user.role !== \"admin\") {\n        filter[\"user\"] = req.user._id;\n      }\n\n      const booking = await Booking.findOne(filter);\n      if (!booking) {\n        return res\n          .status(404)\n          .json({ message: \"Booking not found or cannot be modified\" });\n      }\n\n      // If updating times, validate them\n      const newStartTime = req.body.startTime\n        ? new Date(req.body.startTime)\n        : booking.startTime;\n      const newEndTime = req.body.endTime\n        ? new Date(req.body.endTime)\n        : booking.endTime;\n\n      if (req.body.startTime || req.body.endTime) {\n        const now = new Date();\n\n        if (newStartTime <= now) {\n          return res\n            .status(400)\n            .json({ message: \"Booking must be in the future\" });\n        }\n\n        if (newStartTime >= newEndTime) {\n          return res\n            .status(400)\n            .json({ message: \"End time must be after start time\" });\n        }\n\n        const duration =\n          (newEndTime.getTime() - newStartTime.getTime()) / (1000 * 60 * 60);\n        if (duration > 4) {\n          return res\n            .status(400)\n            .json({ message: \"Booking duration cannot exceed 4 hours\" });\n        }\n\n        // Check for conflicts (excluding current booking)\n        const conflict = await checkBookingConflict(\n          booking.room,\n          newStartTime,\n          newEndTime,\n          booking._id\n        );\n        if (conflict) {\n          return res.status(409).json({\n            message: \"Room is already booked for this time slot\",\n            conflictingBooking: {\n              startTime: conflict.startTime,\n              endTime: conflict.endTime,\n              title: conflict.title,\n            },\n          });\n        }\n      }\n\n      // Update booking fields\n      Object.keys(req.body).forEach((key) => {\n        if (req.body[key] !== undefined) {\n          booking[key] = req.body[key];\n        }\n      });\n\n      await booking.save();\n      await booking.populate(\"room\", \"name location capacity\");\n\n      res.json({\n        message: \"Booking updated successfully\",\n        booking,\n      });\n    } catch (error) {\n      console.error(\"Error updating booking:\", error);\n      res.status(500).json({ message: \"Server error while updating booking\" });\n    }\n  }\n);\n\n// Cancel booking (user can cancel own, admin can cancel any)\nrouter.delete(\n  \"/:id\",\n  authenticateToken,\n  [param(\"id\").isMongoId().withMessage(\"Invalid booking ID\")],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const filter = { _id: req.params.id, status: \"confirmed\" };\n\n      // Regular users can only cancel their own bookings\n      if (req.user.role !== \"admin\") {\n        filter[\"user\"] = req.user._id;\n      }\n\n      const booking = await Booking.findOne(filter);\n      if (!booking) {\n        return res\n          .status(404)\n          .json({ message: \"Booking not found or already cancelled\" });\n      }\n\n      booking.status = \"cancelled\";\n      await booking.save();\n\n      res.json({ message: \"Booking cancelled successfully\" });\n    } catch (error) {\n      console.error(\"Error cancelling booking:\", error);\n      res\n        .status(500)\n        .json({ message: \"Server error while cancelling booking\" });\n    }\n  }\n);\n\n// Get room availability for a specific date\nrouter.get(\n  \"/availability/:roomId\",\n  authenticateToken,\n  [\n    param(\"roomId\").isMongoId().withMessage(\"Invalid room ID\"),\n    query(\"date\").isISO8601().withMessage(\"Valid date is required\"),\n  ],\n  async (req: express.Request, res: express.Response) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { roomId } = req.params;\n      const { date } = req.query;\n\n      // Check if room exists\n      const room = await Room.findOne({ _id: roomId, isActive: true });\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n\n      const startOfDay = new Date((date as string).toString());\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date((date as string).toString());\n      endOfDay.setHours(23, 59, 59, 999);\n\n      const bookings = await Booking.find({\n        room: roomId,\n        status: \"confirmed\",\n        startTime: { $gte: startOfDay, $lte: endOfDay },\n      }).sort({ startTime: 1 });\n\n      res.json({\n        room: {\n          id: room._id,\n          name: room.name,\n          capacity: room.capacity,\n          location: room.location,\n        },\n        date,\n        bookings: bookings.map((booking) => ({\n          id: booking._id,\n          title: booking.title,\n          startTime: booking.startTime,\n          endTime: booking.endTime,\n          user: booking.user,\n        })),\n      });\n    } catch (error) {\n      console.error(\"Error fetching availability:\", error);\n      res\n        .status(500)\n        .json({ message: \"Server error while fetching availability\" });\n    }\n  }\n);\n\nexport default router;\n","import mongoose from \"mongoose\";\n\nconst bookingSchema = new mongoose.Schema(\n  {\n    room: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Room\",\n      required: true,\n    },\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    },\n    title: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    description: {\n      type: String,\n      trim: true,\n    },\n    startTime: {\n      type: Date,\n      required: true,\n    },\n    endTime: {\n      type: Date,\n      required: true,\n    },\n    status: {\n      type: String,\n      enum: [\"confirmed\", \"cancelled\"],\n      default: \"confirmed\",\n    },\n    attendees: [\n      {\n        type: String,\n        trim: true,\n      },\n    ],\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// Validate booking duration (max 4 hours)\nbookingSchema.pre(\"save\", function (next) {\n  const duration =\n    (this.endTime.getTime() - this.startTime.getTime()) / (1000 * 60 * 60); // hours\n  if (duration > 4) {\n    return next(new Error(\"Booking duration cannot exceed 4 hours\"));\n  }\n  if (this.startTime >= this.endTime) {\n    return next(new Error(\"End time must be after start time\"));\n  }\n  next();\n});\n\n// Indexes for efficient queries\nbookingSchema.index({ room: 1, startTime: 1, endTime: 1 });\nbookingSchema.index({ user: 1, startTime: 1 });\nbookingSchema.index({ startTime: 1, endTime: 1 });\n\nconst BookingModel = mongoose.model(\"Booking\", bookingSchema);\nexport default BookingModel;\n"],"mappings":"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","names":["import_mongoose","import_express","import_jsonwebtoken","mongoose","bcrypt","jwt","express","jwt","import_express","import_express_validator","import_mongoose","mongoose","router","express","import_express","import_express_validator","import_mongoose","mongoose","router","express","dotenv","express","helmet","cors","rateLimit","mongoose"]}